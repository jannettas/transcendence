name:     transcendence

services:
  #********************************************************************************
  nginx:
    container_name: nginx
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    restart:        always
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - gunicorn
      - daphne
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - nginx_ssl_vol:/ssl
      - ./transcendence/static_files:/static
      - ./transcendence/media:/media
      - nginx_logs:/var/log/nginx
    networks:
      - frontend
      - backend
  #********************************************************************************
  redis:
    container_name: redis
    image:          redis:7.2.5
    restart:        always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1m30s
      timeout: 10s
      retries: 3
    networks:
        - backend
    command: ["redis-server", "--loglevel", "debug"]
  #********************************************************************************
  db:
    container_name: postgres
    image:          postgres:16.3-bookworm
    restart:        always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U${DB_USER} -d${DB_NAME}"]
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
        - db_vol:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER} 
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
        - backend
  #********************************************************************************
  daphne:
    container_name: daphne
    build:
      dockerfile:     ./daphne/Dockerfile
      context:        ./docker 
    restart:        always
    depends_on:
      db:
        condition: service_healthy
      # redis:
      #   condition:  service_started
    volumes:
      - ./transcendence/:/transcendence
    networks:
        - backend
        - frontend
    environment:
      DB_NAME:      ${DB_NAME}
      DB_USER:      ${DB_USER}
      DB_PASSWORD:  ${DB_PASSWORD}
      DB_HOST:      db
      DB_PORT:      ${DB_PORT}
      SUPER_USER:   ${SUPER_USER}
      SUPER_PASSWORD:   ${SUPER_PASSWORD}
      SUPER_MAIL:   ${SUPER_MAIL}
      SECRET_KEY: ${SECRET_KEY}
  #********************************************************************************
  gunicorn:
    container_name: gunicorn
    build:          ./docker/gunicorn
    restart:        always
    depends_on:
      db:
        condition: service_healthy
    volumes:
        - ./transcendence:/transcendence
    networks:
        - backend
        - frontend
    environment:
      DB_NAME:      ${DB_NAME}
      DB_USER:      ${DB_USER}
      DB_PASSWORD:  ${DB_PASSWORD}
      DB_HOST:      db
      DB_PORT:      ${DB_PORT}
      SECRET_KEY: ${SECRET_KEY}
  #********************************************************************************

  setup:
    build:
      context: ./docker/ELK/setup
      dockerfile: Dockerfile
    container_name: setup
    depends_on:
      nginx:
        condition: service_healthy
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env
    networks:
      - elk
    restart: on-failure
    # restart: always
    healthcheck:
      test: ['CMD-SHELL', '[ -f /usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt ]']
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    container_name: elasticsearch  # Correction ici
    build:
      context: ./docker/ELK/elasticsearch
      dockerfile: Dockerfile
    depends_on:
      setup:
        condition: service_healthy
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - elasticsearch:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'
    env_file:
      - .env
    networks:
      - elk
    restart: always
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ['CMD-SHELL', 'curl -s -k https://elasticsearch:9200 | grep -q "missing authentication credentials"']
      interval: 5s
      timeout: 5s
      retries: 120

  kibana:
    container_name: kibana
    build:
      context: ./docker/ELK/kibana
      dockerfile: Dockerfile
    depends_on:
      setup:
        condition: service_healthy
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibana:/usr/share/kibana/data
    ports:
      - '5601:5601'
    env_file:
      - .env
    networks:
      - elk
    restart: always
    mem_limit: ${MEM_LIMIT}

  logstash:
    container_name: logstash
    build:
      context: ./docker/ELK/logstash
      dockerfile: Dockerfile
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - certs:/usr/share/logstash/config/certs
      - nginx_logs:/usr/share/logstash/nginx/
    env_file:
      - .env
    networks:
      - elk
    restart: always
  #********************************************************************************

volumes:
  db_vol:
  nginx_ssl_vol:
  certs:
  elasticsearch:
  kibana:
  nginx_logs:


networks:
  backend:
  frontend:
  elk:
