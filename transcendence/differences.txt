diff --git a/transcendence/Dockerfile b/transcendence/Dockerfile
index b8e597f..8600bc3 100644
--- a/transcendence/Dockerfile
+++ b/transcendence/Dockerfile
@@ -19,5 +19,7 @@ EXPOSE 8000
 # Default command to run the Django server
 # CMD ["python", "manage.py", "runserver", "0.0.0.0:8000", ""]
 
+RUN python manage.py collectstatic --noinput
+
 #added "python..." to make migrations and migrate before running the server
-CMD ["sh", "-c", "python manage.py makemigrations && python manage.py makemigrations api && python manage.py migrate api && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"] 
+CMD ["sh", "-c", "python manage.py makemigrations && python manage.py migrate && python manage.py collectstatic --noinput && daphne -b 0.0.0.0 -p 8000 config.asgi:application"]
\ No newline at end of file
diff --git a/transcendence/api/migrations/0001_initial.py b/transcendence/api/migrations/0001_initial.py
deleted file mode 100644
index d848480..0000000
--- a/transcendence/api/migrations/0001_initial.py
+++ /dev/null
@@ -1,177 +0,0 @@
-# Generated by Django 5.1.4 on 2025-01-28 13:44
-
-import django.db.models.deletion
-from django.conf import settings
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name="Tournament",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("tournament_name", models.CharField(max_length=100)),
-                ("date", models.DateField()),
-                ("number_of_games", models.IntegerField(default=1)),
-                ("points_to_win", models.IntegerField(default=3)),
-            ],
-        ),
-        migrations.CreateModel(
-            name="Player",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("player", models.CharField(max_length=20)),
-                (
-                    "user",
-                    models.OneToOneField(
-                        blank=True,
-                        null=True,
-                        on_delete=django.db.models.deletion.CASCADE,
-                        to=settings.AUTH_USER_MODEL,
-                    ),
-                ),
-            ],
-        ),
-        migrations.CreateModel(
-            name="PongMatch",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("sets_to_win", models.IntegerField(default=1)),
-                ("points_per_set", models.IntegerField(default=3)),
-                ("player1_sets_won", models.IntegerField(default=0)),
-                ("player2_sets_won", models.IntegerField(default=0)),
-                ("winner", models.CharField(blank=True, max_length=100)),
-                ("date_played", models.DateTimeField(auto_now_add=True)),
-                ("is_tournament_match", models.BooleanField(default=False)),
-                (
-                    "player1",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="matches_as_player1",
-                        to="api.player",
-                    ),
-                ),
-                (
-                    "player2",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="matches_as_player2",
-                        to="api.player",
-                    ),
-                ),
-                (
-                    "user1",
-                    models.ForeignKey(
-                        blank=True,
-                        null=True,
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="initiated_matches",
-                        to=settings.AUTH_USER_MODEL,
-                    ),
-                ),
-                (
-                    "user2",
-                    models.ForeignKey(
-                        blank=True,
-                        null=True,
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="opponent_matches",
-                        to=settings.AUTH_USER_MODEL,
-                    ),
-                ),
-                (
-                    "tournament",
-                    models.ForeignKey(
-                        blank=True,
-                        null=True,
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="matches",
-                        to="api.tournament",
-                    ),
-                ),
-            ],
-        ),
-        migrations.CreateModel(
-            name="PongSet",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                ("set_number", models.IntegerField()),
-                ("player1_score", models.IntegerField(default=0)),
-                ("player2_score", models.IntegerField(default=0)),
-                (
-                    "match",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE,
-                        related_name="sets",
-                        to="api.pongmatch",
-                    ),
-                ),
-            ],
-        ),
-        migrations.CreateModel(
-            name="TournamentPlayer",
-            fields=[
-                (
-                    "id",
-                    models.BigAutoField(
-                        auto_created=True,
-                        primary_key=True,
-                        serialize=False,
-                        verbose_name="ID",
-                    ),
-                ),
-                (
-                    "player",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE, to="api.player"
-                    ),
-                ),
-                (
-                    "tournament",
-                    models.ForeignKey(
-                        on_delete=django.db.models.deletion.CASCADE, to="api.tournament"
-                    ),
-                ),
-            ],
-        ),
-    ]
diff --git a/transcendence/config/asgi.py b/transcendence/config/asgi.py
index 23c7590..6c7dbbe 100644
--- a/transcendence/config/asgi.py
+++ b/transcendence/config/asgi.py
@@ -8,9 +8,18 @@ https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
 """
 
 import os
-
 from django.core.asgi import get_asgi_application
+from channels.routing import ProtocolTypeRouter, URLRouter
+from channels.auth import AuthMiddlewareStack
+import pongSPA.routing
 
 os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
 
-application = get_asgi_application()
+application = ProtocolTypeRouter({
+    "http": get_asgi_application(),
+    "websocket": AuthMiddlewareStack(
+        URLRouter(
+            pongSPA.routing.websocket_urlpatterns
+        )
+    ),
+})
diff --git a/transcendence/config/settings.py b/transcendence/config/settings.py
index 7281d73..a955ed5 100644
--- a/transcendence/config/settings.py
+++ b/transcendence/config/settings.py
@@ -29,6 +29,13 @@ DEBUG = True
 
 ALLOWED_HOSTS = []
 
+ASGI_APPLICATION = "config.asgi.application"
+
+CHANNEL_LAYERS = {
+    "default": {
+        "BACKEND": "channels.layers.InMemoryChannelLayer",
+    },
+}
 
 # Application definition
 
@@ -39,6 +46,7 @@ INSTALLED_APPS = [
     "django.contrib.sessions",
     "django.contrib.messages",
     "django.contrib.staticfiles",
+	"channels",
     "config",
     "pongSPA",
     "api.apps.ApiConfig",
@@ -50,6 +58,7 @@ INSTALLED_APPS = [
 
 MIDDLEWARE = [
     "django.middleware.security.SecurityMiddleware",
+	"whitenoise.middleware.WhiteNoiseMiddleware", 
     "django.contrib.sessions.middleware.SessionMiddleware",
     "django.middleware.common.CommonMiddleware",
     "django.middleware.csrf.CsrfViewMiddleware",
@@ -60,6 +69,10 @@ MIDDLEWARE = [
 
 ROOT_URLCONF = "config.urls"
 
+STATIC_ROOT = BASE_DIR / "staticfiles"
+
+STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
+
 TEMPLATES = [
     {
         "BACKEND": "django.template.backends.django.DjangoTemplates",
diff --git a/transcendence/pongSPA/consumers.py b/transcendence/pongSPA/consumers.py
new file mode 100644
index 0000000..eadc323
--- /dev/null
+++ b/transcendence/pongSPA/consumers.py
@@ -0,0 +1,27 @@
+import json
+import asyncio
+
+from channels.generic.websocket import AsyncWebsocketConsumer
+
+class PongAIConsumer(AsyncWebsocketConsumer):
+    async def connect(self):
+        await self.accept()
+        self.paddle_y = 200  # Position initiale de l'IA
+
+    async def disconnect(self, close_code):
+        pass
+
+    async def receive(self, text_data):
+        data = json.loads(text_data)
+        
+        if data["type"] == "ball_position":
+            ball_y = data["y"]
+            
+            #Déplacer le paddle vers la balle
+            self.paddle_y += (ball_y - self.paddle_y) * 0.1
+            
+            #Renvoyer la position mise à jour du paddle
+            await self.send(text_data=json.dumps({
+                "type": "update_paddle",
+                "y": self.paddle_y
+            }))
diff --git a/transcendence/pongSPA/routing.py b/transcendence/pongSPA/routing.py
new file mode 100644
index 0000000..9a86342
--- /dev/null
+++ b/transcendence/pongSPA/routing.py
@@ -0,0 +1,6 @@
+from django.urls import re_path
+from .consumers import PongAIConsumer
+
+websocket_urlpatterns = [
+    re_path(r"ws/pong_ai/$", PongAIConsumer.as_asgi()),
+]
\ No newline at end of file
diff --git a/transcendence/pongSPA/static/js/pong.js b/transcendence/pongSPA/static/js/pong.js
index c391d01..c27aad8 100644
--- a/transcendence/pongSPA/static/js/pong.js
+++ b/transcendence/pongSPA/static/js/pong.js
@@ -3,6 +3,7 @@ import { DisplayTournamentGame } from "./tournament.js";
 
 let gameInterval; // Variable globale pour stocker l'intervalle de jeu
 // Variables globales pour suivre les scores et le jeu
+let ws; //websocket pour communiquer avec l'IA
 let user1 = "default_user1";
 let user2 = "default_user2";
 let player1 = "default_player1";
@@ -17,6 +18,26 @@ let player2Wins = 0;
 // Variable pour stocker l'historique des sets
 let setHistory = [];
 
+// Ouvrir une connexion websocket avec le serveur
+function connectWebSocket()
+{
+  ws = new WebSocket("ws://localhost:8000/ws/pong_ai/");
+
+  ws.onopen = () => console.log("WebSocket connecté");
+  ws.onmessage = (event) => {
+    const data = JSON.parse(event.data);
+    if (data.type === "update_paddle") {
+      computer.y = data.y;
+    }
+  };
+  ws.onerror = (error) => console.error("WebSocket erreur :", error);
+  ws.onclose = () => 
+  {
+    console.log("WebSocket déconnecté. Reconnexion...");
+    setTimeout(connectWebSocket, 1000);
+  };
+}
+
 // Démarrer le jeu Pong
 function startPongGame() {
   const canvas = document.getElementById("pong");
@@ -31,6 +52,7 @@ function startPongGame() {
 
   initGameObjects(canvas);
   resetScores();
+  connectWebSocket(); 
 
   const fps = 50;
   gameInterval = setInterval(() => {
@@ -92,20 +114,12 @@ function resetScores() {
 
 function update() {
   ball.x += ball.velocityX;
-// liser le compteur de parties
-  player1Wins = 0;
-  player2Wins = 0;
-  // setHistory = []; // Réinitialiser l'historique des sets
-
   ball.y += ball.velocityY;
 
   if (ball.y + ball.radius > canvas.height || ball.y - ball.radius < 0) {
     ball.velocityY = -ball.velocityY;
   }
 
-  let computerLevel = 0.1;
-  computer.y += (ball.y - (computer.y + computer.height / 2)) * computerLevel;
-
   let playerPaddle = ball.x < canvas.width / 2 ? player : computer;
 
   if (collision(ball, playerPaddle)) {
@@ -117,7 +131,7 @@ function update() {
     computer.score++;
     if (computer.score === pointsToWin) {
       player2Wins++;
-      saveSetResult(); // Sauvegarder le résultat du set
+      saveSetResult();
       handleGameEnd(player2);
     } else {
       resetBall();
@@ -126,12 +140,17 @@ function update() {
     player.score++;
     if (player.score === pointsToWin) {
       player1Wins++;
-      saveSetResult(); // Sauvegarder le résultat du set
+      saveSetResult();
       handleGameEnd(player1);
     } else {
       resetBall();
     }
   }
+
+  //Envoyer la position de la balle au serveur
+  if (ws && ws.readyState === WebSocket.OPEN) {
+    ws.send(JSON.stringify({ type: "ball_position", x: ball.x, y: ball.y }));
+  }
 }
 
 function saveSetResult() {
diff --git a/transcendence/requirements.txt b/transcendence/requirements.txt
index ceb09b0..adce7e7 100644
--- a/transcendence/requirements.txt
+++ b/transcendence/requirements.txt
@@ -36,3 +36,6 @@ tomlkit==0.13.2
 ujson==5.10.0
 whatthepatch==1.0.7
 yapf==0.43.0
+channels==4.0.0
+daphne==4.0.0
+whitenoise
\ No newline at end of file
